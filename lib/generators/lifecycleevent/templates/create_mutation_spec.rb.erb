# frozen_string_literal: true

require 'rails_helper'

RSpec.describe 'Add <%= @friendly_name %> Life Cycle Event Mutation', type: :graphql_mutation do
  let(:current_user) { build(:user, :readwrite) }
  let(:specimen) { create(:specimen, owned_by: current_user.email) }
  let(:query_string) {
    <<-GRAPHQL
		mutation($input: Add<%=@name%>LifeCycleEventInput!){
			add<%=@class_name%>ToSpecimen(input: $input){
        errors{
          field
          value
          message
          code
        }
				<%= @class_name[0].downcase + @class_name[1..-1]%>{
          id
          uuid
          datetime
          notes
          specimen{
            id
          }<% @all_fields.each do |field, _values| %>
          <%=field%><%end%>
        }
			}
		}
    GRAPHQL
  }

  context 'with valid parameters' do
    before :each do
      @specimen_id = PlantApiSchema.id_from_object(specimen, Specimen, {})
      @result = PlantApiSchema.execute(query_string, context: { current_user: current_user }, variables: {
                                         input: {
                                           datetime: '2013-07-16T19:23:00Z',
                                           notes: 'newly created record',<% @all_fields.each do |field, values| %>
                                           <%=field%>: <%= values[:sample]%>,<%end%>
                                           specimenId: @specimen_id
                                         }
                                       })
    end
    it 'completes successfully' do
      expect(@result).to_not include 'errors'
      expect(@result).to include 'data'
    end

    it 'creates a record' do
      success_result = @result['data']['add<%=@class_name%>ToSpecimen']['<%= @class_name[0].downcase + @class_name[1..-1]%>']
      expect(success_result['notes']).to eq 'newly created record'
      expect(success_result['specimen']['id']).to eq @specimen_id

      created_event = LifeCycleEvent.find success_result['uuid']
      expect(created_event).to_not be nil
      expect(created_event.notes).to eq 'newly created record'
    end
  end
  describe 'required parameters' do<% @required_fields.each do |field, _values| %>
    it 'returns errors when the <%= field %> is blank' do
      @specimen_id = PlantApiSchema.id_from_object(specimen, Specimen, {})
      result = PlantApiSchema.execute(query_string, context: { current_user: current_user }, variables: {
                                        input: {
                                          datetime: '2013-07-16T19:23:00Z',
                                          notes: 'newly created record',<% @all_fields.except(field).each do |a_field, a_values| %>
                                          <%=a_field%>: <%= a_values[:sample]%>,<%end%>
                                          specimenId: @specimen_id,
                                          <%= field %>: ''
                                        }
                                      })
      error_result = result['data']['add<%=@class_name%>ToSpecimen']['errors']
      expect(error_result[0]['field']).to eq '<%= field %>'
      expect(error_result[0]['code']).to eq 400
    end<% end %>
  end
end
