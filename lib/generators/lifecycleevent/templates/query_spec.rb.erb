# frozen_string_literal: true

require 'rails_helper'

RSpec.describe 'Life Cycle Event Query', type: :graphql_query do
  context '<%=@friendly_name%>' do
    it 'loads a <%=@friendly_name.downcase%> life cycle event by ID' do
      query_string = <<-GRAPHQL
      query($id: ID!){
        lifeCycleEvent(id: $id){
          __typename
          id
          datetime
          notes
          specimen{
            id
          }<% if @all_fields.length.positive? %>
          ... on <%= @class_name%> {<% @all_fields.each do |field, _values|%>
            <%= field %><% end %>
          }<% end %>
        }
      }
      GRAPHQL

      current_user = build(:user, :readwrite)
      specimen = create(:specimen, owned_by: current_user.email)
      <%= @class_name.underscore %> = create(:<%= @class_name.underscore %>, notes: 'loaded by id', specimen: specimen)
      <%= @class_name.underscore %>_id = PlantApiSchema.id_from_object(<%= @class_name.underscore %>, <%= @class_name %>, {})
      result = PlantApiSchema.execute(query_string, context: { current_user: current_user }, variables: { id: <%= @class_name.underscore %>_id })
      life_cycle_event_result = result['data']['lifeCycleEvent']
      # Make sure the query worked
      expect(life_cycle_event_result['id']).to eq <%= @class_name.underscore %>_id
      expect(life_cycle_event_result['notes']).to eq 'loaded by id'
      expect(life_cycle_event_result['__typename']).to eq '<%= @class_name%>'<% @all_fields.each do |field, _values|%>
      expect(life_cycle_event_result['<%=field%>']).to_not be_nil<% end %>
    end
  end
end
